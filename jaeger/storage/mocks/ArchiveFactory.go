// Copyright (c) 2018 The Jaeger Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package mocks

import mock "github.com/stretchr/testify/mock"
import spanstore "github.com/jaegertracing/jaeger/storage/spanstore"
import storage "github.com/jaegertracing/jaeger/storage"

// ArchiveFactory is an autogenerated mock type for the ArchiveFactory type
type ArchiveFactory struct {
	mock.Mock
}

// CreateArchiveSpanReader provides a mock function with given fields:
func (_m *ArchiveFactory) CreateArchiveSpanReader() (spanstore.Reader, error) {
	ret := _m.Called()

	var r0 spanstore.Reader
	if rf, ok := ret.Get(0).(func() spanstore.Reader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(spanstore.Reader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateArchiveSpanWriter provides a mock function with given fields:
func (_m *ArchiveFactory) CreateArchiveSpanWriter() (spanstore.Writer, error) {
	ret := _m.Called()

	var r0 spanstore.Writer
	if rf, ok := ret.Get(0).(func() spanstore.Writer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(spanstore.Writer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

var _ storage.ArchiveFactory = (*ArchiveFactory)(nil)
